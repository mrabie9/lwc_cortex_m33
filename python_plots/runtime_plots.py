import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import gridspec
import matplotlib.ticker as plticker
from matplotlib.ticker import FuncFormatter
import numpy as np

# m7
t = [2.68, 2.75, 2.80, 6.03, 6.31, 6.60, 9.25, 9.26, 9.35, 9.36, 9.46, 9.55, 10.85, 14.21, 14.26, 14.45, 15.83, 17.23, 17.32, 17.70, 17.85, 18.15, 23.38, 23.61, 23.92, 24.10, 24.12, 27.71, 30.06, 30.17, 34.04, 34.98, 35.25, 37.28, 37.39, 37.54, 38.20, 43.96, 46.63, 47.06, 48.67, 50.36, 51.07, 51.80, 57.86, 60.01, 60.12, 64.26, 72.45, 77.30, 77.57, 80.87, 84.83, 96.06, 104.36, 112.06, 114.57, 120.57, 121.50, 121.85, 137.78, 154.42, 160.87]
r_e = [1.48, -2.40, -2.61, 0.39, -0.15, -0.09, 0.27, 0.02, -0.28, 0.12, -0.96, 0.06, -0.09, 0.15, 0.33, -0.30, 0.03, -0.27, 0.18, -0.36, -0.08, 0.01, -0.21, 0.57, -0.27, -1.40, -0.22, 0.10, -0.85, -1.10, 1.20, -0.07, -0.01, 1.35, -0.32, -0.88, 2.18, -0.01, 0.11, -0.04, 0.00, -0.05, -0.53, -1.08, -0.01, -0.20, 0.34, 0.72, 0.36, -0.03, -0.09, 0.00, -0.01, -0.01, 0.10, 1.54, 0.01, 0.00, -0.10, -0.26, -0.22, -0.72, 0.01]

min_val = np.min(t)
max_val = np.max(t)
t_n = (t - min_val) / (max_val - min_val)

# # m4
t4 = [9.42, 9.43, 9.44, 22.11, 22.38, 22.57, 31.92, 32.96, 33.99, 34.26, 34.50, 34.52, 34.98, 35.05, 35.17, 38.36, 41.07, 42.31, 42.77, 46.94, 48.25, 48.31, 52.15, 52.42, 52.80, 52.81, 53.44, 55.04, 56.92, 61.91, 63.89, 63.98, 64.68, 64.77, 65.04, 69.14, 71.00, 71.01, 77.11, 78.53, 81.62, 83.23, 87.40, 89.81, 89.99, 90.21, 96.68, 98.74, 104.79, 124.11, 136.68, 141.81, 144.63, 146.93, 147.65, 149.24, 161.12, 163.54, 164.86, 170.54, 183.42]
r_e4 = [0.20, 0.21, 0.21, 0.13, 0.15, 0.13, -0.09, 0.20, 0.14, 0.16, 0.28, 0.20, 0.20, 0.20, 0.20, 0.21, 0.23, 0.22, 0.20, 0.26, 0.14, 0.13, 0.23, 0.10, 0.17, 0.16, 0.15, 0.52, 0.11, -0.30, 0.19, 0.20, 0.01, 0.11, 0.16, 0.18, 0.20, 0.13, 0.18, 0.27, 0.19, 0.20, 0.27, 0.18, 0.18, 0.24, 0.22, 0.19, 0.24, 0.26, 0.32, 0.24, 0.27, 0.23, 0.28, 0.24, 0.26, 0.25, 0.25, 0.25, 0.22]

min_val = np.min(t4)
max_val = np.max(t4)
t4_n = (t4 - min_val) / (max_val - min_val)

# # m33
t33 = [2.32485868, 2.328204364, 2.333449014, 5.033893744, 5.218356149, 5.235087359, 6.254156353, 6.324337563, 6.324406248, 8.091893513, 8.108249865, 8.138668723, 9.492824785, 9.493231308, 9.539918974, 10.64137071, 10.66419994, 11.91985281, 11.99750323, 12.19826844, 14.3141686, 14.49409965, 15.57661919, 15.78300633, 16.16774034, 16.24535304, 16.48170594, 16.48863778, 19.58953682, 19.72103119, 20.13438102, 21.44123148, 22.93783147, 24.09995627, 24.1002189, 27.04020683, 28.15661859, 28.33117098, 28.37384958, 31.97473846, 34.54670757, 36.93312049, 37.93219626, 38.31053711, 39.1422534, 39.23870623, 45.28554529, 48.92728664, 54.89949226, 57.25517511, 57.40190856, 60.42227983, 61.90942764, 62.95620918, 68.23974103, 70.81567168, 71.03966922, 74.00717974, 78.04848999, 80.73688149, 82.55819976, 83.2047388, 84.49574113]
r_e33 = [0.07, -0.91, -0.94, -1.07, -1.12, -1.05, -1.03, -1.02, -1.02, -1.01, -0.97, -0.97, -0.98, -0.98, -0.94, -0.92, -0.98, -0.92, -0.81, -0.97, -0.94, -0.99, -1.26, -0.97, -0.98, -1.02, -0.95, -0.96, -0.92, -0.92, -0.97, -1.54, -0.91, -0.91, -0.91, -0.93, -0.91, -0.97, -0.93, -0.92, -0.92, -0.94, -0.94, -0.94, -0.94, -0.91, -0.94, -1.01, -0.94, -0.95, -0.93, -0.93, -0.94, -0.93, -0.93, -0.92, -0.92, -0.92, -0.93, -0.93, -0.93, -0.93, -0.99]
print("M7 RMS: ", round(np.sqrt(np.mean(np.array(r_e) ** 2)),2), " Var: ",  round(np.var(np.array(r_e))/round(np.sqrt(np.mean(np.array(r_e) ** 2)),2),3))
print("M4 RMS: ", round(np.sqrt(np.mean(np.array(r_e4) ** 2)),2), " Var: ",  round(np.var(np.array(r_e4))/round(np.sqrt(np.mean(np.array(r_e4) ** 2)),2),3))
print("M33 RMS: ", round(np.sqrt(np.mean(np.array(r_e33) ** 2)),2), " Var: ",  round(np.var(np.array(r_e33))/round(np.sqrt(np.mean(np.array(r_e33) ** 2)),2),3))
print(np.mean(np.array(r_e)))

min_val = np.min(t33)
max_val = np.max(t33)
t33_n = (t33 - min_val) / (max_val - min_val)

# Create a function to format y-axis labels as percentages
def percentage_formatter(x, pos):
    return '{:.1%}'.format(x/100)

# Apply the formatter to the y-axis
plt.gca().yaxis.set_major_formatter(FuncFormatter(percentage_formatter))

# colors = ["skyblue", "Green", "Orange"]
colors = ["#000080", "skyblue", "#1e90ff", "#87cefa"]
plt.plot(t_n, r_e, color=colors[0], label='M7')
plt.plot(t4_n, r_e4, color=colors[1], label='M4')
plt.plot(t33_n, r_e33, color=colors[2], label='M33')
plt.yticks(np.arange(-3.0, 2.6, 0.5, dtype=float))
plt.xticks(np.arange(0,1.1, 0.1))
plt.subplots_adjust(left = 0.07, right = 0.98, top=0.98, wspace=0.9)
plt.ylabel('Relative error (%)', fontsize=11)
plt.xlabel('Normalised time (s)', fontsize=11)
plt.legend()
plt.grid()
plt.show()